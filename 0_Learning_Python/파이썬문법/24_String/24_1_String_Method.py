#######################
# 24.1.1  문자열 바꾸기 ##
################################################################################
# replace('바꿀문자열', '새문자열')은 문자열 안의 문자열을 다른 문자열로 바꿉니다
# 문자열 자체는 변경하지 않으며 바뀐 결과를 반환
#
# >>> 'Hello, world!'.replace('world', 'Python')
# 'Hello, Python
################################################################################


################################################################
# 24.1.2  문자 바꾸기 ( string.maketrans('previous', 'after')  ) #
##############################################################
# str.maketrans('바꿀문자', '새문자')로 변환 테이블을 만듭니다.
# 그다음에 translate(테이블)을 사용하면 문자를 바꾼 뒤 결과를 반환합니다.
# 다음은 문자열 'apple'에서 a를 1, e를 2, i를 3, o를 4, u를 5로 바꿉니다.
#
# >>> table = str.maketrans('aeiou', '12345')
# >>> 'apple'.translate(table)
# '1ppl2'
################################################################################


###################################################
# 24.1.3  문자열 분리하기 string.split(), 리스트로 저장 ##
##################################################
# split()은 공백을 기준으로 문자열을 분리하여 리스트로 만듭니다.
#
# >>> 'apple pear grape pineapple orange'.split()
# ['apple', 'pear', 'grape', 'pineapple', 'orange']
#
# split('기준문자열')과 같이 기준 문자열을 지정하면 기준 문자열로 문자열을 분리합니다.
# 즉, 문자열에서 각 단어가 ,(콤마)와 공백으로 구분되어 있을 때
# ', '으로 문자열을 분리하면 단어만 리스트로 만듭니다.
#
# >>> 'apple, pear, grape, pineapple, orange'.split(', ')
# ['apple', 'pear', 'grape', 'pineapple', 'orange']
################################################################################

############################################################
# 24.1.4  구분자 문자열과 문자열 리스트 연결하기 '구분자'.join(리스트) ##
###########################################################
# join(리스트)는 구분자 문자열과 문자열 리스트의 요소를 연결하여 문자열로 만듭니다.
# '구분자'.join(리스트)
#
# >>> '-'.join(['apple', 'pear', 'grape', 'pineapple', 'orange'])
# 'apple-pear-grape-pineapple-orange'
################################################################################


####################################################
# 24.1.5                                          ##
# upper(), lower(), lstrip(), rstrip(), strip()   ##
# lstrip('문자'), rstrip('문자'), strip('문자')      ##
################################################################################
# 아래의 예제에서는 좌우의 ,콤마와 .구두점을 삭제합니다.
# 공백을 넣지 않았으므로 공백은 유지됩니다.
#
# >>> ', python.'.rstrip(',.')
# ', python'
################################################################################


#############################################
# 참고 | 구두점을 간단하게 삭제하기                ##
#     | .strip(string.punctuation)  이용   ##
################################################################################
# string 모듈의 punctuation에는 모든 구두점이 들어있습니다.
# 다음과 같이 strip 메서드에 string.punctuation을 넣으면
# 문자열 양쪽의 모든 구두점을 간단하게 삭제할 수 있습니다.
#
# >>> import string
# >>> ', python.'.strip(string.punctuation)
# ' python'
# >>> string.punctuation
# '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
# 만약 공백까지 삭제하고 싶다면 string.punctuation에 공백 ' 이'을 연결해서 넣어주면 되겠죠?
# >>> ', python.'.strip(string.punctuation + ' ')
# 'python'
################################################################################

######################################################
# 24.1.6 문자열 정렬                                  ##
# str.ljust(길이), str.rjust(길이), str.center(길이)  ##
################################################################################


#######################
# 24.1.7 매서드 체이닝  ##
################################################################################
# 이렇게 문자열 메서드는 처리한 결과를 반환하도록 만들어져 있습니다.
# 따라서 메서드를 계속 연결해서 호출하는 메서드 체이닝이 가능합니다.
# 메서드 체이닝은 메서드를 줄줄이 연결한다고 해서 메서드 체이닝(method chaining)이라 부릅니다.
# 다음은 문자열을 오른쪽으로 정렬한 뒤 대문자로 바꿉니다.
#
# >>> 'python'.rjust(10).upper()
# '    PYTHON'
################################################################################

###################################
# 24.1.7 문자열 찾기 ( .rfind() )  ##
##################################
# rfind('찾을문자열')은 오른쪽에서부터 특정 문자열을 찾아서 인덱스를 반환하고,
# 문자열이 없으면 ""-1""을 반환합니다(r은 오른쪽( right)을 의미).
# 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환합니다.
# 여기서는 'pl'이 2개 있지만 오른쪽에서 처음 찾은 'pl'의 인덱스 12를 반환합니다.
#
# >>> 'apple pineapple'.rfind('pl')
# 12
# >>> 'apple pineapple'.rfind('xy')
# -1
################################################################################


############################################
# 21.1.8 문자열 위치 찾기 (  .index('문자')  ) ##
# 문자가 시작되는 첫 인덱스 반환
###########################################
# index('찾을문자열')은 왼쪽에서부터 특정 문자열을 찾아서 인덱스를 반환합니다.
# 단, 문자열이 없으면 ""에러""를 발생시킵니다.
# index도 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환합니다.
#
# >>> 'apple pineapple'.index('pl')
# 2
################################################################################


#######################################
# 21.1.9 문자열 개수 세기  .count('문자') ##
######################################
# count('문자열')은 현재 문자열에서 특정 문자열이 몇 번 나오는지 알아냅니다.
# 여기서는 'pl'이 2번 나오므로 2가 반환됩니다.
#
# >>> 'apple pineapple'.count('pl')
# 2
################################################################################


# startswith(str,start, end)
# endswith(str,start, end)