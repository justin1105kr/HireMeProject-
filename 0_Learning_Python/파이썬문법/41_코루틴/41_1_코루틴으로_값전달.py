41_1 코루틴과 일반 함수의 호출
코루틴 사용법 : 보통 while True : 를 사용하여 무한루프로 사용 
코루틴은 제너레이터의 특별한 형태
제너레이터 : yield로 값을 전달
코루틴 : (yield)로 값을 받아옴
코루틴에 값을 전달시 send 메소드 사용

일반함수 ( 서브루틴은 메인루틴의 종속관계)
메인 루틴에서 서브 루틴을 호출 시,
서브 루틴이 끝날 경우 서브 루틴의 내용을 사라짐

코루틴 ( 메인루틴과 서브루틴은 대등한 관계 )
코루틴은 함수가 종료되지 않은 상태에서 메인 루틴의 코드를 실행,
다시 돌아와서 코루틴의 코드를 실행
코루틴의 내용은 계속 유지가 됨
메인루틴 -> 코루틴 호출 (메일루틴 대기상태) -> 코루틴 -> 메인루틴 호출(코루틴대기상태) ->...

# 41_1_1 코루틴에 값 전달
# 제너레이터 : yield로 값을 전달
# 코루틴 : (yield)로 값을 받아옴
# 코루틴에 값을 전달시 send 메소드 사용
# 코루틴 최초 실행 :
# next(코루틴 객체), 코루틴객체.send(None)

# 코루틴객체.send(값)
# 변수 = (yield)

def number_coroutine():
    while True:          # 코루틴을 계속 유지하기 위해 무한 루프 사용
        x = (yield)      # 코루틴 바깥에서 값을 받아옴, yield를 괄호로 묶어야 함
        print(x)


co = number_coroutine()
next(co)    # 코루틴 안의 yield까지 코드 실행(최초 실행)
# co.send(None)

co.send(1)  # 코루틴에 숫자 1을 보냄
co.send(2)  # 코루틴에 숫자 2을 보냄
co.send(3)  # 코루틴에 숫자 3을 보냄

