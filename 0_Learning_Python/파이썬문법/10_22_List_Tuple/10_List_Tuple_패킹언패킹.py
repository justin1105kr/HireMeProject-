############################
# 패킹 언패킹 - List, Tuple ##
##########################################
# 리스트 언패킹(list unpacking), 튜플 언패킹(tuple unpacking)이라고 합니다.
# 리스트와 튜플 변수로도 변수 여러 개를 만들 수 있습니다.
# 다음과 같이 리스트와 튜플의 요소를 변수 여러 개에 할당하는 것을 말합니다.
#
# >>> x = [1, 2, 3] # 패킹
# >>> a, b, c = x   # 언패킹
# >>> print(a, b, c)
# 1 2 3
# >>> y = (4, 5, 6)
# >>> d, e, f = y
# >>> print(d, e, f)
# 4 5 6
# ################################################################################

# 참고 | 반환값을 _에 저장하는 이유
# 반환값을 언패킹했을 때 _에 할당하는 것은
# 특정 순서의 반환값 사용하지 않고 무시하겠다는 관례적 표현입니다.
# 예를 들어 다음과 같은 코드는 언패킹 했을 때 두 번째 변수는 사용하지 않겠다는 뜻입니다.
a, _, c, d =  range(4)
print(a, c, d)


########################################
# 리스트 표현식(Comprehension) 사용하기    ##
# 리스트 표현 식 내에 for 문 여러개 사용 가능 ##
######################################
# ( 1 )
# [식 for 변수 in 리스트 if문]트
a = [i for i in range(10)]        # 0부터 9까지 숫자를 생성하여 리스트 생성
# list(식 for 변수 in 리스트 if문)
b = list(i for i in range(10))    # 0부터 9까지 숫자를 생성하여 리스트 생성
# ( 2 )
# 리스트 표현식 for문 여러번 사용하기
# 순서는 뒤의 for문에서 앞의 For문 순으로 작동 !!!!
a = [ i * j  for j in range(2, 10) for i in range(1, 10) ]



####################################
# 10.2.1 요소가 1개 들어있는 튜플 만들기 ##
################################################################################
# 요소가 한 개인 튜플을 만들 때는 ( )(괄호) 안에 값 한 개를 넣고
# ,(콤마)를 붙입니다. 또는, 괄호로 묶지 않고 값 한 개에 ,를 붙여도 됩니다.
# 튜플은 요소를 변경, 추가, 삭제할 수도 없는데 값 한 개짜리 튜플은 왜 필요할까요?
# 함수(클래스)를 사용하다 보면 값이 아닌 튜플을 넣어야 할 경우가 생깁니다.
# 이때 값은 한 개지만 튜플을 넣어야 할 때 (값, )과 같은 형식을 사용해야 합니다.
# 실무에서는 가끔 이 문법을 사용하게 되는데, 그냥 튜플 형태를 유지하기 위한 문법이라고 생각하면 됩니다.
#
# >>> (38, )
# (38,)
# >>> 38,
# (38,)
#################################################################################


#######################################
# 참고 | 괄호 없이 값을 콤마로 구분시 튜플 생성 #
################################################################################
# a = 1,2
# print(a)


#############################################
# 10.2.3 튜플을 리스트로 만들고 리스트를 튜플로 만들기 #
################################################################################
# 튜플과 리스트는 요소를 변경, 추가, 삭제할 수 있는지 없는지만 다를 뿐 기능과 형태는 같습니다.
# 따라서 튜플을 리스트로 만들거나 리스트를 튜플로 만들 수도 있습니다.
# 다음과 같이 tuple 안에 리스트를 넣으면 새 튜플이 생깁니다
# 반대로 list 안에 튜플을 넣으면 새 리스트가 생성됩니다.
#
# >>> a = [1, 2, 3]
# >>> tuple(a)
# (1, 2, 3)
#
# >>> b = (4, 5, 6)
# >>> list(b)
# [4, 5, 6]

################################################################################
# 참고 | list와 tuple 안에 문자열을 넣으면?
# 다음과 같이 list와 tuple에 문자열을 넣으면 문자 리스트, 문자 튜플이 생성됩니다.
# >>> list('Hello')
# ['H', 'e', 'l', 'l', 'o']
# >>> tuple('Hello')
# ('H', 'e', 'l', 'l', 'o')



# 😁😁😁
# 참고 | 리스트와 튜플로 변수 만들기
# 리스트와 튜플을 사용하면 변수 여러 개를 한 번에 만들 수 있습니다. 이때 변수의 개수와 리스트(튜플)의 요소 개수는 같아야 합니다.
# >>> a, b, c = [1, 2, 3]
# >>> print(a, b, c)
# 1 2 3
# >>> d, e, f = (4, 5, 6)
# >>> print(d, e, f)
# 4 5 6






## 연습문제 22.9
# 입력값 2개 받고
# 첫번째 정수부터 두번째 정수까지를 지수로하는 2의 거듭제곱 리스트 출력
# 두번쨰, 뒤에서 두번째 요소 삭제

a, b = map(int, input().split())
integers = list(range(a, b+1))
sqrs = []
del integers[1]
del integers[-2]

for i in integers :
    sqrs.append(2**i)

print(sqrs)
