"""
################################
반복 가능한 객체들의 비교 ###########
################################
각 객체의 인덱스끼리 각각 비교 후 불리언 값 반환
첫 인덱스 비교 -> 두 번째 ...
알파벳일 경우 알파벳순으로

################################
39.1 반복 가능한 객체와 이터레이터  ##
#############################################################
이터레이터(Iterator) : 값을 차례로 꺼낼 수 있는 객체
- 반복가능한 객체는 __iter__ 메소드로 이터레이터를 얻고, 이터레이터의 __next__ 메소드를 반복
- 반복가능한 객체는 __iter__ 메소드를 사용할 수 있는 객체
- 반복가능한 객체 != 이터레이터 객체

#############################################################
지연 평가(lazy evaluation) ##
###########################
어떤 연속된 큰 값을 사용할 때, 미리 값을 만들면 메모리 성능에 불리함
따라서 필요한 시점에 연속된 값들을 만드는 방식

########################################
객체가 이터레이터 프로토콜을 지원한다 의미     ##
__iter__와 __next__ 메소드를 가진 객체   ##
즉, for 문 등 반복문에서 사용 가능한 객체   ##
#############################################################


##################################################
39.1 반복 가능한 객체 (Iterable Object)와 시퀀스 객체 ##
#############################################################
반복 가능한 객체 : 문자열 / 리스트 / 튜플 / range / 딕셔너리 / 세트
=> 반복 가능한 모든 객체
시퀀스 객체 : 문자열 / 리스트 / 튜플 / range
반복가능한 객체 ⊃ 시퀀스 객체
=> 반복 가능하고 순서가 정해져있는 객체

모든 반복가능한 객체
시퀀스 언패킹 연산자(*) 사용가능 => 문자열 / 리스트 / 튜플
x, *y = [1,2,3,4] # x : 1 / y = 2,3,4


< 메소드 정리 >
1.튜플 => 함수의 인자는 튜플로 전달됨 ㅇ
A.count(X) : 튜플 A에서 X 값을 갖는 원소 갯수 반환
A.index(X) : 튜플 A에서 X의 인덱스 위치 반환




3. 셋
A.add(X) : 셋에 x값 추가
A.update(B), A |= B : A를 B에 추가 (합집함)
A.union(B), A | B : A를 B에 추가, 연산 결과는 복사본
A.intersection(B), A & B : A와 B 교집합 복사본 반환
A.difference(B) : A - B 집합연산, 복사본 반환
A.clear()
A.discard(x) : x값 제거, 반환값 없음
A.remove(x) : x값 제거, x없을 경우 KeyError
A.pop() : 무작위 항목 제거, 반 비어있을 경우 KeyError

4. 딕셔너리
딕셔너리의 items()와 keys() 메서드에서 셋 연산 사용 가능, value에서는 셋 연산 사용 불가능
해시테이블
항목접근 : O(1)
A.setDefault(key, default)
    딕셔너리 키의 존재 모르는 상태에서 접근 시 사용, 키가 없을 경우 해당 키와 default 값 추가
A.update(B) : 딕셔너리 A에 딕셔너리B의 키값이 존재할 경우, 업데이트. 없다면 추가
A.get(key) : 딕셔너리 A의 key의 값을 반환. 키가 없다면 아무것도 반환 안함
A.pop(key) : 딕셔너리 A의 키 항목 제거, 반환 환
A.popitem() : 딕셔너리에서 임의의 키쌍을 제거, 반환

딕셔너리 뷰 ( 딕셔너리의 항목을 조회하는 읽기 전용의 반복 가능한 객체 )
A.items()
A.values()
A.keys()
"""