########################
# 참고 | 예외 계층       ##
####################################################
# 예외도 클래스 상속으로 구현되며 다음과 같은 계층으로 이루어져 있습니다.
# 보통 파이썬에서 새로운 예외를 만들 때는 Exception을 상속받아서 구현합니다.
# 전체 계층도는 파이썬 공식 문서를 참조하세요.
# Built-in Exceptions: https://docs.python.
####################################################


##############################################
# 38.3 예외 발생시키기: raise 예외('에러메세지')   ##
####################################################
# raise 예외('에러메시지')
# Exception에 넣은 에러 메시지는 except Exception as e:의 e에 들어갑니다
# raise로 예외를 발생시키면 raise 아래에 있는 코드는 실행되지 않고 바로 except로 넘어갑니다
# 이 예제에서는 예외로 Exception을 사용했는데
# RuntimeError, NotImplementedError 등 다른 예외를 사용해도 상관없습니다.
####################################################
# 예제_1_ ##
try:
    x = int(input('3의 배수를 입력하세요: '))
    if x % 3 != 0:                                 # x가 3의 배수가 아니면
        raise Exception('3의 배수가 아닙니다.')    # 예외를 발생시킴
    print(x)
except Exception as e:                             # 예외가 발생했을 때 실행됨
    print('예외가 발생했습니다.', e)


##############################################
# 38_3_1 raise 처리 과정                      ##
# 예제_2_ : 'try except'없는 블록에서 raise 사용 ##
####################################################
# try except가 없는 상태에서 raise로 예외를 발생시켰습니다.
# 이렇게 되면 함수 바깥에 있는 except에서 예외가 처리됩니다.
# 즉, 예외가 발생하더라도
# 현재 코드 블록에서 처리해줄 except가 없다면 except가 나올 때까지 계속 상위 코드 블록으로 올라갑니다.
#
# 만약 함수 바깥에도 처리해줄 except가 없다면 코드 실행은 중지되고 에러가 표시
def three_multiple():
    x = int(input('3의 배수를 입력하세요: '))
    if x % 3 != 0:                               # x가 3의 배수가 아니면
        raise Exception('3의 배수가 아닙니다.')      # 예외를 발생시킴
    print(x)                                    # 현재 함수 안에는 except가 없으므로
                                                # 예외를 상위 코드 블록으로 넘김

try:
    three_multiple()
except Exception as e:                           # 하위 코드 블록에서 예외가 발생해도 실행됨
    print('예외가 발생했습니다.', e)
# 출력 : 예외가 발생했습니다. 3의 배수가 아닙니다.



#################################################
# 38.3.2  현재 예외를 다시 발생시키기                 ##
# try except 구문에서 처리한 raise 예외 다시 부르기    ##
####################################################
def three_multiple():
    try:
        x = int(input('3의 배수를 입력하세요: '))
        if x % 3 != 0:  # x가 3의 배수가 아니면
            raise Exception('3의 배수가 아닙니다.')  # 예외를 발생시킴
        print(x)
    except Exception as e:  # 함수 안에서 예외를 처리함
        print('three_multiple 함수에서 예외가 발생했습니다.', e)
        raise  # raise로 현재 예외를 다시 발생시켜서 상위 코드 블록으로 넘김

try:
    three_multiple()
except Exception as e:  # 하위 코드 블록에서 예외가 발생해도 실행됨
    print('스크립트 파일에서 예외가 발생했습니다.', e)



###################################
# 참고 | assert로 예외 발생 시키기     #
# assert 조건식, 에러메세지          #
#################################################
x = int(input('3의 배수를 입력하세요: '))
assert x % 3 == 0, '3의 배수가 아닙니다.'    # 3의 배수가 아니면 예외 발생, 3의 배수이면 그냥 넘어감
print(x)