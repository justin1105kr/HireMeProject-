dic1 = dict(a=1, b=2, c=3)
dic2 = dict(zip(['a', 'b', 'c'], [1, 2, 3]))
dic3 = dict([('a',1), ('b',2), ('c',3)])
dic4 = dict({'a' : 1, 'b' : 2, 'c' : 3})
dic5 = {'a' : 1, 'b': 2, 'c' : 3 }
print(dic1, dic2, dic3, dic4, dic5, sep=' \n')

#######################
# 12.1 딕셔너리 만들기  ##
################################################################################
# 특히 딕셔너리는 예제의 게임 캐릭터 능력치처럼
# 특정 주제에 대해 연관된 값들을 모아둘 때 주로 사용합니다.
#
# 딕셔너리는 { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분해줍니다.
#
# 딕셔너리 = {키1: 값1, 키2: 값2}
# >>> lux = {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
################################################################################


#########################################################################
# 25.1.9  리스트와 튜플로 딕셔너리 만들기  ( dict.fromkeys(키 리스트, 기본값) )    ##
################################################################################
# 이번에는 리스트(튜플)로 딕셔너리를 만들어보겠습니다.
#
# 먼저 keys = ['a', 'b', 'c', 'd']처럼 키가 들어있는 리스트를 준비합니다(튜플도 됩니다).
# 그리고 dict.fromkeys에 키가 들어있는 리스트를 넣으면 딕셔너리를 생성합니다.
#
# dict.fromkeys(키리스트)는 키 리스트로 딕셔너리를 생성하며 값은 모두 None으로 저장합니다.
#
# >>> keys = ['a', 'b', 'c', 'd']
# >>> x = dict.fromkeys(keys)
# >>> x
# {'a': None, 'b': None, 'c': None, 'd': None}
# dict.fromkeys(키리스트, 값)처럼 키 리스트와 값을 지정하면 해당 값이 키의 값으로 저장됩니다.
#
# >>> y = dict.fromkeys(keys, 100)
# >>> y
# {'a': 100, 'b': 100, 'c': 100, 'd': 100}
################################################################################


#############################
# 12.1.1  키 이름이 중복되면?  ##
################################################################################
# 그럼 딕셔너리를 만들 때 키 이름이 중복되면 어떻게 될까요? (파이썬 3.6 기준)
# 즉, 딕셔너리에 키와 값을 저장할 때 키가 중복되면 가장 뒤에 있는 값만 사용합니다.
# 따라서 중복되는 키는 저장되지 않습니다.
#
#
# 12.1.2  딕셔너리 키의 자료형
# 딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며
# 자료형을 섞어서 사용해도 됩니다.
# 그리고 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형을 사용할 수 있습니다.
#
# 단, 키에는 리스트와 딕셔너리를 사용할 수 없습니다
# >>> x = {100: 'hundred', False: 0, 3.5: [3.5, 3.5]}
# >>> x
# {100: 'hundred', False: 0, 3.5: [3.5, 3.5]}
################################################################################


############################
# 12.1.3  빈 딕셔너리 만들기  ##
################################################################################
# 빈 딕셔너리를 만들 때는 { }만 지정하거나 dict를 사용하면 됩니다. 보통은 { }를 주로 사용합니다.
#
# 딕셔너리 = {}
# 딕셔너리 = dict()
################################################################################


################################
# 12.1.4  dict로 딕셔너리 만들기  ##
################################################################################
# dict는 다음과 같이 키와 값을 연결하거나, 리스트, 튜플, 딕셔너리로 딕셔너리를 만들 때 사용합니다.
#
# 딕셔너리 = dict(키1=값1, 키2=값2)
# 딕셔너리 = dict(zip([키1, 키2], [값1, 값2]))
# 딕셔너리 = dict([(키1, 값1), (키2, 값2)])
# 딕셔너리 = dict({키1: 값1, 키2: 값2})
#
# -------------------------------------------------------------------------------------------
# 먼저 다음과 같이 dict에서 키=값 형식으로 딕셔너리를 만들 수 있습니다.
# ★ 이때는 키에 ' '(작은따옴표)나 " "(큰따옴표)를 사용하지 않아야 합니다.
# 키는 딕셔너리를 만들고 나면 문자열로 바뀝니다.
# >>> lux1 = dict(health=490, mana=334, melee=550, armor=18.72)    # 키=값 형식으로 딕셔너리를 만듦
# >>> lux1
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# -------------------------------------------------------------------------------------------
# 두 번째 방법은 dict에서 zip 함수를 이용하는 방법입니다.
# 다음과 같이 키가 들어있는 리스트와 값이 들어있는 리스트를
# 차례대로 zip에 넣은 뒤 다시 dict에 넣어주면 됩니다 (zip은 '47.5 내장 함수'를 참조해주세요).
# 튜플도 상관없습니다.
# >>> lux2 = dict(zip(['health', 'mana', 'melee', 'armor'], [490, 334, 550, 18.72]))
# # zip 함수로 키 리스트와 값 리스트를 묶음
# >>> lux2
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# -------------------------------------------------------------------------------------------
# 세 번째 방법은 리스트 안에 (키, 값) 형식의 튜플을 나열하는 방법입니다.
# >>> lux3 = dict([('health', 490), ('mana', 334), ('melee', 550), ('armor', 18.72)])
# >>> lux3                                                  # (키, 값) 형식의 튜플로 딕셔너리를 만듦
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# --------------------------------------------------------------------------------------------
# 네 번째 방법은 dict 안에서 중괄호로 딕셔너리를 생성하는 방법입니다.
# >>> lux4 = dict({'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72})
# >>> lux4                                                  # dict 안에서 중괄호로 딕셔너리를 만듦
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
################################################################################

#########################################################
# 25.1.2. setdefault(키, 값), setdefault(키) : 딕셔너리에 키와 기본값 저장하기 ##
################################################################################
# setdefault(키)는 딕셔너리에 키-값 쌍을 추가합니다.
# setdefault에 키만 지정하면 값에 None을 저장합니다. 다음은 키 'e'를 추가하고 값에 None을 저장합니다.
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.setdefault('e')
# >>> x
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None}
#
# setdefault(키, 기본값)처럼 키와 기본값을 지정하면 값에 기본값을 저장한 뒤 해당 값을 반환합니다.
# 다음은 키 'f'를 추가하고 값에 100을 저장한 뒤 100을 반환합니다.
# >>> x.setdefault('f', 100)
# 100
# >>> x
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None, 'f': 100}
################################################################################


###############################################################
# 25.1.3. 딕셔너리 수정하기
# update(키=값) : 딕셔너리 키의 값 수정/추가, 키에 따옴표 없이  ##
################################################################################
# 키가 문자열인 경우, 작은 따옴표 없이 사용
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.update(a=90)
#
# 키가 숫자인 경우
# update(딕셔너리) 로 수정
# >>> y = {1: 'one', 2: 'two'}
# >>> y.update({1: 'ONE', 3: 'THREE'})
#
# 다른 방법으로는 리스트와 튜플을 이용하는 방법도 있습니다.
# update(리스트), update(튜플)은 리스트와 튜플로 값을 수정합니다.
# 여기서 리스트는 [[키1, 값1], [키2, 값2]] 형식으로 키와 값을 리스트로 만들고
# 이 리스트를 다시 리스트 안에 넣어서 키-값 쌍을 나열해줍니다(튜플도 같은 형식).
#
# >>> y.update([[2, 'TWO'], [4, 'FOUR']])
# >>> y
# {1: 'ONE', 2: 'TWO', 3: 'THREE', 4: 'FOUR'}
#
# 특히 update(반복가능한객체)는
# 키-값 쌍으로 된 반복 가능한 객체로 값을 수정합니다.
# 즉, 다음과 같이 키 리스트와 값 리스트를 묶은
# zip 객체로 값을 수정할 수 있습니다.
#
# >>> y.update(zip([1, 2], ['one', 'two']))
# >>> y
# {1: 'one', 2: 'two', 3: 'THREE', 4: 'FOUR'}
#
################################################################################


##########################################################
# 25.1.4  딕셔너리에서 키-값 쌍 삭제하기 (  pop('키', '값')  )  ##
################################################################################
# pop('키', '기본값')
# del dictionary['키']
# pop(키)는 딕셔너리에서 특정 키-값 쌍을 삭제한 뒤 삭제한 값을 반환합니다.
# 다음은 딕셔너리 x에서 키 'a'를 삭제한 뒤 10을 반환합니다.
# pop(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는
# 해당 키-값 쌍을 삭제한 뒤 삭제한 값을 반환하지만 키가 없을 때는 기본값만 반환합니다.
# 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환합니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.pop('a')
# 10
#
# >>> x.pop('z', 0)
# 0
################################################################################


###########################################
# 25.1.5  딕셔너리에서 임의의 키-값 쌍 삭제하기  ##
################################################################################
# popitem()은 딕셔너리에서 임의의 키-값 쌍을 삭제한 뒤 삭제한 키-값 쌍을 튜플로 반환합니다.
# 파이썬 3.6 이상에서는 마지막 키-값 쌍을 삭제하며 3.5 이하에서는 임의의 키-값 쌍을 삭제합니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.popitem()
# ('d', 40)
################################################################################


#########################################
# 25.1.6  딕셔너리의 모든 키-값 쌍을 삭제하기  ##
################################################################################
# clear()는 딕셔너리의 모든 키-값 쌍을 삭제합니다.
# 다음은 딕셔너리 x의 모든 키-값 쌍을 삭제하여 빈 딕셔너리 {}가 됩니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.clear()
# >>> x
# {}
################################################################################


################################################################################
# 25.1.7  딕셔너리에서 키의 값을 가져오기
# 이번에는 딕셔너리에서 키의 값을 가져오거나 저장하는 메서드를 사용해보겠습니다.
#
# get(키)는 딕셔너리에서 특정 키의 값을 가져옵니다.
# 다음은 딕셔너리 x에서 키 'a'의 값을 가져옵니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.get('a')
# 10
#
# get(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는
# 해당 키의 값을 반환하지만 키가 없을 때는 기본값을 반환합니다.
# 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환합니다.
#
# >>> x.get('z', 0)
# 0
################################################################################


#########################################
# 25.1.8  딕셔너리에서 키-값 쌍을 모두 가져오기 ##
################################################################################
# 딕셔너리는 키와 값을 가져오는 다양한 메서드를 제공합니다.
#
# items: 키-값 쌍을 모두 가져옴
# keys: 키를 모두 가져옴
# values: 값을 모두 가져옴
# 다음과 같이 items()는 딕셔너리의 키-값 쌍을 모두 가져옵니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.items()
# dict_items([('a', 10), ('b', 20), ('c', 30), ('d', 40)])
# keys()는 키를 모두 가져옵니다.
#
# >>> x.keys()
# dict_keys(['a', 'b', 'c', 'd'])
# values()는 값을 모두 가져옵니다.
#
# >>> x.values()
# dict_values([10, 20, 30, 40])
################################################################################


################################################################################
# 25.1.9  리스트와 튜플로 딕셔너리 만들기 (dict.fromkeys(리스트/튜플))##
#############################################################
# 이번에는 리스트(튜플)로 딕셔너리를 만들어보겠습니다.
#
# 먼저 keys = ['a', 'b', 'c', 'd']처럼 키가 들어있는 리스트를 준비합니다(튜플도 됩니다).
# 그리고 dict.fromkeys에 키가 들어있는 리스트를 넣으면 딕셔너리를 생성합니다.
#
# dict.fromkeys(키리스트)는 키 리스트로 딕셔너리를 생성하며 값은 모두 None으로 저장합니다.
#
# >>> keys = ['a', 'b', 'c', 'd']
# >>> x = dict.fromkeys(keys)
# >>> x
# {'a': None, 'b': None, 'c': None, 'd': None}
################################################################################





################################################################################################################################################################
# 25.3 딕셔너리 표현식 사용하기
# https://dojang.io/mod/page/view.php?id=2309
# 즉, dict.fromkeys(keys).items()로 키-값 쌍을 구한 뒤 키는 변수 key,
# 값은 변수 value에 꺼내고  최종적으로 key와 value를 이용하여 딕셔너리를 만듭니다.
# if도 표현식에 사용 가능
#
# keys = ['a', 'b', 'c', 'd']
# x = {a : b for a, b in dict.fromkeys(keys).items()}
# x = {v : 0 for v in {'a' :10, 'b':20, 'c':30}.values()}
# x = { k : v for k, v in {'a' :10, 'b':20, 'c':30}.items() if v != 20 }
################################################################################


################################################################################
# 25.3.1 딕셔너리 키, 쌍 삭제 방법
# 딕셔너리는 for 반복문으로 반복하면서 키-값 쌍을 삭제하면 안 됩니다.
# 이때는 딕셔너리 표현식에서 if 조건문을 사용하여 삭제할 값을 제외하면 됩니다.
#
# {키: 값 for 키, 값 in 딕셔너리 if 조건식}
# dict({키: 값 for 키, 값 in 딕셔너리 if 조건식})
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x = {key: value for key, value in x.items() if value != 20}
# 딕셔너리 표현식에서 if value != 20과 같이 if 조건문을 지정하면
# 값이 20이 아닌 키-값 쌍으로 다시 딕셔너리를 만듭니다.
# 직접 키-값 쌍을 삭제하는 방식이 아니라
# 삭제할 키-값 쌍을 제외하고 남은 키-값 쌍으로 딕셔너리를 새로 만드는 것이죠.
################################################################################


####################################
# 25.4 딕셔너리 안에서 딕셔너리 사용하기  ##
################################################################################
# 딕셔너리 안에 들어있는 딕셔너리에 접근하려면
# 딕셔너리 뒤에 [ ](대괄호)를 단계만큼 붙이고 키를 지정해주면 됩니다.
# 딕셔너리[키][키] = 값
# 여기서는 딕셔너리가 두 단계로 구성되어 있으므로 대괄호를 두 번 사용합니다.
# terrestrial_planet = {
#     'Mercury': {
#         'mean_radius': 2439.7,
#         'mass': 3.3022E+23,
#         'orbital_period': 87.969
#     },
#     'Venus': {
#         'mean_radius': 6051.8,
#         'mass': 4.8676E+24,
#         'orbital_period': 224.70069,
#     }
# }
# print(terrestrial_planet['Venus']['mean_radius'])    # 6051.8
################################################################################


####################################
# 25.5  딕셔너리의 할당과 복사 알아보기  ##
# 깊은 복사, 옅은 복사               ##
################################################################################
# 리스트와 마찬가지로 딕셔너리도 할당과 복사는 큰 차이점이 있습니다. 먼저 딕셔너리를 만든 뒤 다른 변수에 할당합니다.
#
# >>> x = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
# >>> y = x
# >>> x is y # True
# >>> x == y # True
# 이렇게 하면 x와 y는 같은 객체이므로,
# x의 값이 변경되면 y의 값도 변경
#
#
# x와 y를 완전히 다른 객체로 만들기 위해서는 co됨py메서드로 모든 키-값 쌍을 복사해야 함
# >>> y = x.copy()
# >>> x is y # False
# >>> x == y # True
################################################################################


#########################################
# 25.5.1  중첩 딕셔너리의 할당과 복사 알아보기  ##
################################################################################
# 중첩 딕셔너리를 완전히 복사하려면 copy 메서드 대신 copy 모듈의 deepcopy 함수를 사용해야 합니다.
#dic1 = dict(a=1, b=2, c=3)
dic2 = dict(zip(['a', 'b', 'c'], [1, 2, 3]))
dic3 = dict([('a',1), ('b',2), ('c',3)])
dic4 = dict({'a' : 1, 'b' : 2, 'c' : 3})
dic5 = {'a' : 1, 'b': 2, 'c' : 3 }
print(dic1, dic2, dic3, dic4, dic5, sep=' \n')

#######################
# 12.1 딕셔너리 만들기  ##
################################################################################
# 특히 딕셔너리는 예제의 게임 캐릭터 능력치처럼
# 특정 주제에 대해 연관된 값들을 모아둘 때 주로 사용합니다.
#
# 딕셔너리는 { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분해줍니다.
#
# 딕셔너리 = {키1: 값1, 키2: 값2}
# >>> lux = {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
################################################################################


#########################################################################
# 25.1.9  리스트와 튜플로 딕셔너리 만들기  ( dict.fromkeys(키 리스트, 기본값) )    ##
################################################################################
# 이번에는 리스트(튜플)로 딕셔너리를 만들어보겠습니다.
#
# 먼저 keys = ['a', 'b', 'c', 'd']처럼 키가 들어있는 리스트를 준비합니다(튜플도 됩니다).
# 그리고 dict.fromkeys에 키가 들어있는 리스트를 넣으면 딕셔너리를 생성합니다.
#
# dict.fromkeys(키리스트)는 키 리스트로 딕셔너리를 생성하며 값은 모두 None으로 저장합니다.
#
# >>> keys = ['a', 'b', 'c', 'd']
# >>> x = dict.fromkeys(keys)
# >>> x
# {'a': None, 'b': None, 'c': None, 'd': None}
# dict.fromkeys(키리스트, 값)처럼 키 리스트와 값을 지정하면 해당 값이 키의 값으로 저장됩니다.
#
# >>> y = dict.fromkeys(keys, 100)
# >>> y
# {'a': 100, 'b': 100, 'c': 100, 'd': 100}
################################################################################


#############################
# 12.1.1  키 이름이 중복되면?  ##
################################################################################
# 그럼 딕셔너리를 만들 때 키 이름이 중복되면 어떻게 될까요? (파이썬 3.6 기준)
# 즉, 딕셔너리에 키와 값을 저장할 때 키가 중복되면 가장 뒤에 있는 값만 사용합니다.
# 따라서 중복되는 키는 저장되지 않습니다.
#
#
# 12.1.2  딕셔너리 키의 자료형
# 딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며
# 자료형을 섞어서 사용해도 됩니다.
# 그리고 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형을 사용할 수 있습니다.
#
# 단, 키에는 리스트와 딕셔너리를 사용할 수 없습니다
# >>> x = {100: 'hundred', False: 0, 3.5: [3.5, 3.5]}
# >>> x
# {100: 'hundred', False: 0, 3.5: [3.5, 3.5]}
################################################################################


############################
# 12.1.3  빈 딕셔너리 만들기  ##
################################################################################
# 빈 딕셔너리를 만들 때는 { }만 지정하거나 dict를 사용하면 됩니다. 보통은 { }를 주로 사용합니다.
#
# 딕셔너리 = {}
# 딕셔너리 = dict()
################################################################################


################################
# 12.1.4  dict로 딕셔너리 만들기  ##
################################################################################
# dict는 다음과 같이 키와 값을 연결하거나, 리스트, 튜플, 딕셔너리로 딕셔너리를 만들 때 사용합니다.
#
# 딕셔너리 = dict(키1=값1, 키2=값2)
# 딕셔너리 = dict(zip([키1, 키2], [값1, 값2]))
# 딕셔너리 = dict([(키1, 값1), (키2, 값2)])
# 딕셔너리 = dict({키1: 값1, 키2: 값2})
#
# -------------------------------------------------------------------------------------------
# 먼저 다음과 같이 dict에서 키=값 형식으로 딕셔너리를 만들 수 있습니다.
# ★ 이때는 키에 ' '(작은따옴표)나 " "(큰따옴표)를 사용하지 않아야 합니다.
# 키는 딕셔너리를 만들고 나면 문자열로 바뀝니다.
# >>> lux1 = dict(health=490, mana=334, melee=550, armor=18.72)    # 키=값 형식으로 딕셔너리를 만듦
# >>> lux1
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# -------------------------------------------------------------------------------------------
# 두 번째 방법은 dict에서 zip 함수를 이용하는 방법입니다.
# 다음과 같이 키가 들어있는 리스트와 값이 들어있는 리스트를
# 차례대로 zip에 넣은 뒤 다시 dict에 넣어주면 됩니다 (zip은 '47.5 내장 함수'를 참조해주세요).
# 튜플도 상관없습니다.
# >>> lux2 = dict(zip(['health', 'mana', 'melee', 'armor'], [490, 334, 550, 18.72]))
# # zip 함수로 키 리스트와 값 리스트를 묶음
# >>> lux2
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# -------------------------------------------------------------------------------------------
# 세 번째 방법은 리스트 안에 (키, 값) 형식의 튜플을 나열하는 방법입니다.
# >>> lux3 = dict([('health', 490), ('mana', 334), ('melee', 550), ('armor', 18.72)])
# >>> lux3                                                  # (키, 값) 형식의 튜플로 딕셔너리를 만듦
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
# --------------------------------------------------------------------------------------------
# 네 번째 방법은 dict 안에서 중괄호로 딕셔너리를 생성하는 방법입니다.
# >>> lux4 = dict({'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72})
# >>> lux4                                                  # dict 안에서 중괄호로 딕셔너리를 만듦
# {'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72}
#
################################################################################

#########################################################
# 25.1.2. setdefault(키, 값), setdefault(키) : 딕셔너리에 키와 기본값 저장하기 ##
################################################################################
# setdefault(키)는 딕셔너리에 키-값 쌍을 추가합니다.
# setdefault에 키만 지정하면 값에 None을 저장합니다. 다음은 키 'e'를 추가하고 값에 None을 저장합니다.
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.setdefault('e')
# >>> x
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None}
#
# setdefault(키, 기본값)처럼 키와 기본값을 지정하면 값에 기본값을 저장한 뒤 해당 값을 반환합니다.
# 다음은 키 'f'를 추가하고 값에 100을 저장한 뒤 100을 반환합니다.
# >>> x.setdefault('f', 100)
# 100
# >>> x
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None, 'f': 100}
################################################################################


###############################################################
# 25.1.3. 딕셔너리 수정하기
# update(키=값) : 딕셔너리 키의 값 수정/추가, 키에 따옴표 없이  ##
################################################################################
# 키가 문자열인 경우, 작은 따옴표 없이 사용
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.update(a=90)
#
# 키가 숫자인 경우
# update(딕셔너리) 로 수정
# >>> y = {1: 'one', 2: 'two'}
# >>> y.update({1: 'ONE', 3: 'THREE'})
#
# 다른 방법으로는 리스트와 튜플을 이용하는 방법도 있습니다.
# update(리스트), update(튜플)은 리스트와 튜플로 값을 수정합니다.
# 여기서 리스트는 [[키1, 값1], [키2, 값2]] 형식으로 키와 값을 리스트로 만들고
# 이 리스트를 다시 리스트 안에 넣어서 키-값 쌍을 나열해줍니다(튜플도 같은 형식).
#
# >>> y.update([[2, 'TWO'], [4, 'FOUR']])
# >>> y
# {1: 'ONE', 2: 'TWO', 3: 'THREE', 4: 'FOUR'}
#
# 특히 update(반복가능한객체)는
# 키-값 쌍으로 된 반복 가능한 객체로 값을 수정합니다.
# 즉, 다음과 같이 키 리스트와 값 리스트를 묶은
# zip 객체로 값을 수정할 수 있습니다.
#
# >>> y.update(zip([1, 2], ['one', 'two']))
# >>> y
# {1: 'one', 2: 'two', 3: 'THREE', 4: 'FOUR'}
#
################################################################################


##########################################################
# 25.1.4  딕셔너리에서 키-값 쌍 삭제하기 (  pop('키', '값')  )  ##
################################################################################
# pop('키', '기본값')
# del dictionary['키']
# pop(키)는 딕셔너리에서 특정 키-값 쌍을 삭제한 뒤 삭제한 값을 반환합니다.
# 다음은 딕셔너리 x에서 키 'a'를 삭제한 뒤 10을 반환합니다.
# pop(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는
# 해당 키-값 쌍을 삭제한 뒤 삭제한 값을 반환하지만 키가 없을 때는 기본값만 반환합니다.
# 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환합니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.pop('a')
# 10
#
# >>> x.pop('z', 0)
# 0
################################################################################


###########################################
# 25.1.5  딕셔너리에서 임의의 키-값 쌍 삭제하기  ##
################################################################################
# popitem()은 딕셔너리에서 임의의 키-값 쌍을 삭제한 뒤 삭제한 키-값 쌍을 튜플로 반환합니다.
# 파이썬 3.6 이상에서는 마지막 키-값 쌍을 삭제하며 3.5 이하에서는 임의의 키-값 쌍을 삭제합니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.popitem()
# ('d', 40)
################################################################################


#########################################
# 25.1.6  딕셔너리의 모든 키-값 쌍을 삭제하기  ##
################################################################################
# clear()는 딕셔너리의 모든 키-값 쌍을 삭제합니다.
# 다음은 딕셔너리 x의 모든 키-값 쌍을 삭제하여 빈 딕셔너리 {}가 됩니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.clear()
# >>> x
# {}
################################################################################


################################################################################
# 25.1.7  딕셔너리에서 키의 값을 가져오기
# 이번에는 딕셔너리에서 키의 값을 가져오거나 저장하는 메서드를 사용해보겠습니다.
#
# get(키)는 딕셔너리에서 특정 키의 값을 가져옵니다.
# 다음은 딕셔너리 x에서 키 'a'의 값을 가져옵니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.get('a')
# 10
#
# get(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는
# 해당 키의 값을 반환하지만 키가 없을 때는 기본값을 반환합니다.
# 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환합니다.
#
# >>> x.get('z', 0)
# 0
################################################################################


#########################################
# 25.1.8  딕셔너리에서 키-값 쌍을 모두 가져오기 ##
################################################################################
# 딕셔너리는 키와 값을 가져오는 다양한 메서드를 제공합니다.
#
# items: 키-값 쌍을 모두 가져옴
# keys: 키를 모두 가져옴
# values: 값을 모두 가져옴
# 다음과 같이 items()는 딕셔너리의 키-값 쌍을 모두 가져옵니다.
#
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x.items()
# dict_items([('a', 10), ('b', 20), ('c', 30), ('d', 40)])
# keys()는 키를 모두 가져옵니다.
#
# >>> x.keys()
# dict_keys(['a', 'b', 'c', 'd'])
# values()는 값을 모두 가져옵니다.
#
# >>> x.values()
# dict_values([10, 20, 30, 40])
################################################################################


################################################################################
# 25.1.9  리스트와 튜플로 딕셔너리 만들기 (dict.fromkeys(리스트/튜플))##
#############################################################
# 이번에는 리스트(튜플)로 딕셔너리를 만들어보겠습니다.
#
# 먼저 keys = ['a', 'b', 'c', 'd']처럼 키가 들어있는 리스트를 준비합니다(튜플도 됩니다).
# 그리고 dict.fromkeys에 키가 들어있는 리스트를 넣으면 딕셔너리를 생성합니다.
#
# dict.fromkeys(키리스트)는 키 리스트로 딕셔너리를 생성하며 값은 모두 None으로 저장합니다.
#
# >>> keys = ['a', 'b', 'c', 'd']
# >>> x = dict.fromkeys(keys)
# >>> x
# {'a': None, 'b': None, 'c': None, 'd': None}
################################################################################




################################################################################################################################################################
################################################################################################################################################################
# 25.3 딕셔너리 표현식 사용하기
# https://dojang.io/mod/page/view.php?id=2309
# 즉, dict.fromkeys(keys).items()로 키-값 쌍을 구한 뒤 키는 변수 key,
# 값은 변수 value에 꺼내고  최종적으로 key와 value를 이용하여 딕셔너리를 만듭니다.
# if도 표현식에 사용 가능
#
# keys = ['a', 'b', 'c', 'd']
# x = {a : b for a, b in dict.fromkeys(keys).items()}
# x = {v : 0 for v in {'a' :10, 'b':20, 'c':30}.values()}
# x = { k : v for k, v in {'a' :10, 'b':20, 'c':30}.items() if v != 20 }
################################################################################


################################################################################
# 25.3.1 딕셔너리 키, 쌍 삭제 방법
# 딕셔너리는 for 반복문으로 반복하면서 키-값 쌍을 삭제하면 안 됩니다.
# 이때는 딕셔너리 표현식에서 if 조건문을 사용하여 삭제할 값을 제외하면 됩니다.
#
# {키: 값 for 키, 값 in 딕셔너리 if 조건식}
# dict({키: 값 for 키, 값 in 딕셔너리 if 조건식})
# >>> x = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
# >>> x = {key: value for key, value in x.items() if value != 20}
# 딕셔너리 표현식에서 if value != 20과 같이 if 조건문을 지정하면
# 값이 20이 아닌 키-값 쌍으로 다시 딕셔너리를 만듭니다.
# 직접 키-값 쌍을 삭제하는 방식이 아니라
# 삭제할 키-값 쌍을 제외하고 남은 키-값 쌍으로 딕셔너리를 새로 만드는 것이죠.
################################################################################


####################################
# 25.4 딕셔너리 안에서 딕셔너리 사용하기  ##
################################################################################
# 딕셔너리 안에 들어있는 딕셔너리에 접근하려면
# 딕셔너리 뒤에 [ ](대괄호)를 단계만큼 붙이고 키를 지정해주면 됩니다.
# 딕셔너리[키][키] = 값
# 여기서는 딕셔너리가 두 단계로 구성되어 있으므로 대괄호를 두 번 사용합니다.
# terrestrial_planet = {
#     'Mercury': {
#         'mean_radius': 2439.7,
#         'mass': 3.3022E+23,
#         'orbital_period': 87.969
#     },
#     'Venus': {
#         'mean_radius': 6051.8,
#         'mass': 4.8676E+24,
#         'orbital_period': 224.70069,
#     }
# }
# print(terrestrial_planet['Venus']['mean_radius'])    # 6051.8
################################################################################


###################################
# 25.5  딕셔너리의 할당과 복사 알아보기  ##
################################################################################
# 리스트와 마찬가지로 딕셔너리도 할당과 복사는 큰 차이점이 있습니다. 먼저 딕셔너리를 만든 뒤 다른 변수에 할당합니다.
#
# >>> x = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
# >>> y = x
# >>> x is y # True
# >>> x == y # True
# 이렇게 하면 x와 y는 같은 객체이므로,
# x의 값이 변경되면 y의 값도 변경
#
#
# x와 y를 완전히 다른 객체로 만들기 위해서는 co됨py메서드로 모든 키-값 쌍을 복사해야 함
# >>> y = x.copy()
# >>> x is y # False
# >>> x == y # True
################################################################################


#########################################
# 25.5.1  중첩 딕셔너리의 할당과 복사 알아보기  ##
################################################################################
# 중첩 딕셔너리를 완전히 복사하려면 copy 메서드 대신 copy 모듈의 deepcopy 함수를 사용해야 합니다.
#
# >>> x = {'a': {'python': '2.7'}, 'b': {'python': '3.6'}}
# >>> import copy             # copy 모듈을 가져옴
# >>> y = copy.deepcopy(x)    # copy.deepcopy 함수를 사용하여 깊은 복사
################################################################################


##############################
# 참고 | defaultdict 사용하기  ##
################################################################################
# 지금까지 사용한 딕셔너리(dict)는 없는 키에 접근했을 경우 에러가 발생합니다.
#
# >>> x = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
# >>> x['z']    # 키 'z'는 없음
# Traceback (most recent call last):
#   File "<pyshell#5>", line 1, in <module>
#     x['z']
# KeyError: 'z'
#
# 그러면 에러가 발생하지 않게 하려면 어떻게 해야 할까요?
# 이때는 defaultdict를 사용합니다.
# defaultdict는 없는 키에 접근하더라도 에러가 발생하지 않으며 기본값을 반환합니다.
# defaultdict는 collections 모듈에 들어있으며 기본값 생성 함수를 넣습니다.
# defaultdict(기본값생성함수)
# 다음은 기본값이 0인 defaultdict 딕셔너리를 만듭니다.
#
# >>> from collections import defaultdict    # collections 모듈에서 defaultdict를 가져옴
# >>> y = defaultdict(int)    # int로 기본값 생성
# 딕셔너리 y에는 키 'z'가 없지만 y['z']와 같이 키의 값을 가져와보면 0이 나옵니다. 왜냐하면 기본값을 0으로 설정했기 때문입니다.
# >>> y['z']
# 0
#
# defaultdict(int)처럼 int를 넣었는데 기본값이 왜 0인지 의문이 생길 수도 있습니다.
# int는 실수나 문자열을 정수로 변환하지만,
# 다음과 같이 int에 아무것도 넣지 않고 호출하면 0을 반환합니다.
# >>> int()
# 0
#
# defaultdict에는 특정 값을 반환하는 함수를 넣어주면 되는데,
# defaultdict(int)는 기본값 생성 함수로 int를 지정하여 0이 나오도록 만든 것입니다.
# 0이 아닌 다른 값을 기본값으로 설정하고 싶다면 다음과 같이 기본값 생성 함수를 만들어서 넣어주면 됩니다.
#
# >>> z = defaultdict(lambda: 'python')
# >>> z['a']
# 'python'
# >>> z[0]
# 'python'
#
# 여기서는 문자열 'python'을 반환하는 lambda: 'python'을 넣어서
# 'python'이 기본값이 되도록 설정했습니다.
# lambda는 'Unit 32 람다 표현식 사용하기'에서 자세히 설명하겠습니다.
################################################################################

# >>> x = {'a': {'python': '2.7'}, 'b': {'python': '3.6'}}
# >>> import copy             # copy 모듈을 가져옴
# >>> y = copy.deepcopy(x)    # copy.deepcopy 함수를 사용하여 깊은 복사
################################################################################


##############################
# 참고 | defaultdict 사용하기  ##
################################################################################
# 지금까지 사용한 딕셔너리(dict)는 없는 키에 접근했을 경우 에러가 발생합니다.
#
# >>> x = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
# >>> x['z']    # 키 'z'는 없음
# Traceback (most recent call last):
#   File "<pyshell#5>", line 1, in <module>
#     x['z']
# KeyError: 'z'
#
# 그러면 에러가 발생하지 않게 하려면 어떻게 해야 할까요?
# 이때는 defaultdict를 사용합니다.
# defaultdict는 없는 키에 접근하더라도 에러가 발생하지 않으며 기본값을 반환합니다.
# defaultdict는 collections 모듈에 들어있으며 기본값 생성 함수를 넣습니다.
# defaultdict(기본값생성함수)
# 다음은 기본값이 0인 defaultdict 딕셔너리를 만듭니다.
#
# >>> from collections import defaultdict    # collections 모듈에서 defaultdict를 가져옴
# >>> y = defaultdict(int)    # int로 기본값 생성
# 딕셔너리 y에는 키 'z'가 없지만 y['z']와 같이 키의 값을 가져와보면 0이 나옵니다. 왜냐하면 기본값을 0으로 설정했기 때문입니다.
# >>> y['z']
# 0
#
# defaultdict(int)처럼 int를 넣었는데 기본값이 왜 0인지 의문이 생길 수도 있습니다.
# int는 실수나 문자열을 정수로 변환하지만,
# 다음과 같이 int에 아무것도 넣지 않고 호출하면 0을 반환합니다.
# >>> int()
# 0
#
# defaultdict에는 특정 값을 반환하는 함수를 넣어주면 되는데,
# defaultdict(int)는 기본값 생성 함수로 int를 지정하여 0이 나오도록 만든 것입니다.
# 0이 아닌 다른 값을 기본값으로 설정하고 싶다면 다음과 같이 기본값 생성 함수를 만들어서 넣어주면 됩니다.
#
# >>> z = defaultdict(lambda: 'python')
# >>> z['a']
# 'python'
# >>> z[0]
# 'python'
#
# 여기서는 문자열 'python'을 반환하는 lambda: 'python'을 넣어서
# 'python'이 기본값이 되도록 설정했습니다.
# lambda는 'Unit 32 람다 표현식 사용하기'에서 자세히 설명하겠습니다.
################################################################################
