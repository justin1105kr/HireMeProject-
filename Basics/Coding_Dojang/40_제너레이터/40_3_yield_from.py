#####################################################
# 40_3_yield from 으로 값을 여러번 밖으로 전달하기        ##
##############################################################
# yield from 반복가능한객체
# yield from 이터레이터
# yield from 제너레이터객체

###############################################
# 40.3.1  yield from에 제너레이터 객체 지정하기    ##
##############################################################
def number_generator(stop):
    n = 0
    while n < stop:
        yield n
        n += 1


def three_generator():
    yield from number_generator(3)  # 숫자를 세 번 바깥으로 전달


for i in three_generator():
    print(i)


########################
# 참고 | 제너레이터 표현식 ##
##############################################################
# 리스트 표현식을 사용할 때 [ ](대괄호)를 사용했습니다.
# 같은 리스트 표현식을 ( )(괄호)로 묶으면 제너레이터 표현식이 됩니다.
# 리스트 표현식은 처음부터 리스트의 요소를 만들어내지만
# 제너레이터 표현식은 필요할 때 요소를 만들어내므로 ""메모리를 절약할 수 있습니다.""
# (식 for 변수 in 반복가능한객체)
##############################################################

(i for i in range(50) if i % 2 == 0)