################################
# 24.2.1  서식 지정자로 문자열 넣기 ##
################################
# '%s' % '문자열'
#
# >>> 'I am %s.' % 'james'
# 'I am james.'
################################################################################


################################
# 24.2.2  서식 지정자로 숫자 넣기  ##
###############################
#
# '%d' % 숫자
# >>> 'I am %d years old.' % 20
# 'I am 20 years old.'
################################################################################


###################################
# 24.2.3  서식 지정자로 소수점 표현하기 ##
################################################################################
# '%f' % 숫자
# >>> '%f' % 2.3
# '2.300000'
#
# 실수를 넣을 때는 %f를 사용하며 고정 소수점 fixed point의 f입니다.
# %f는 기본적으로 소수점 이하 6자리까지 표시하므로 2.3은 2.300000으로 표시됩니다.
# 소수점 이하 자릿수를 지정하고 싶다면 다음과 같이
# f 앞에 .(점)과 자릿수를 지정해주면 됩니다.
#
# '%.자릿수f' % 숫자
# >>> '%.2f' % 2.3
# '2.30'
# >>> '%.3f' % 2.3
# '2.300'
################################################################################


###################################
# 24.2.4  서식 지정자로 문자열 정렬하기 ##
################################################################################
# 이번에는 서식 지정자와 숫자를 조합하여 문자열을 정렬하는 방법을 알아보겠습니다.
# 다음과 같이 % 뒤에 숫자를 붙이면
# 문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬하고 남는 공간을 공백으로 채웁니다.
#
# %길이s
# >>> '%10s' % 'python'
# '    python'
#
# 그럼 왼쪽 정렬은 어떻게 할까요? 왼쪽 정렬은 문자열 길이에 -를 붙여주면 됩니다.
#
# %-길이s
# >>> '%-10s' % 'python'
# 'python    '
#
################################################################################


################################
# 참고 | 자릿수가 다른 숫자 출력하기 ##
################################################################################
# 문자열 오른쪽 정렬은 자릿수가 다른 숫자를 출력할 때 유용합니다.
# %d와 %f도 숫자와 조합하여 오른쪽으로 정렬할 수 있습니다.
#
# %길이d
# >>> '%10d' % 150
# '       150'
# >>> '%10d' % 15000
# '     15000'
#
# 실수는 다음과 같이 .(점) 앞에 정렬할 길이를 지정하고,
# 점 뒤에 소수점 이하 자릿수를 지정합니다.
#
# %길이.자릿수f
# >>> '%10.2f' % 2.3
# '      2.30'
# >>> '%10.2f' % 2000.3
# '   2000.30'
################################################################################


#################################
# 24.2.6  format 메서드 사용하기  ##
################################################################################
# '{인덱스}'.format(값)
#
# >>> 'Hello, {0}'.format('world!')
# 'Hello, world!'
#
# >>> 'Hello, {0} {2} {1}'.format('Python', 'Script', 3.6)
# 'Hello, Python 3.6 Script'
#
# >>> '{0} {0} {1} {1}'.format('Python', 'Script')
# 'Python Python Script Script'
#
# 참고 | 중괄호 출력하기
# { } 중괄호 자체를 출력할 때는 {{, }}처럼 중괄호를 두 번 사용하면 됩니다.
# >>> '{{ {0} }}'.format('Python')
# '{ Python }'
################################################################################


########################################
# 24.2.9  format 메서드에서 인덱스 생략하기 ##
################################################################################
# 만약 { }에서 인덱스를 생략하면 format에 지정한 순서대로 값이 들어갑니다.
#
# >>> 'Hello, {} {} {}'.format('Python', 'Script', 3.6)
# 'Hello, Python Script 3.6'
################################################################################

###############################################
# 24.2.10 format 메서드에서 인덱스 대신 이름 지정하기 ##
################################################################################
# { }에 인덱스로 순서를 지정하려니 조금 헷갈리죠? { }에 인덱스 대신 이름을 지정할 수도 있습니다.
#
# >>> 'Hello, {language} {version}'.format(language='Python', version=3.6)
# 'Hello, Python 3.6'
# {language}와 {version}처럼 { }에 이름을 지정했습니다.
# format에는 format(language='Python', version=3.6)과 같이
# 이름에 해당하는 값을 지정해주면 됩니다.
################################################################################


##########################################
# 24.2.11 문자열 포매팅에 변수를 그대로 사용하기 ##
################################################################################
# 파이썬 3.6부터는 문자열을 만드는 더 간단한 방법을 제공합니다.
# 다음과 같이 변수에 값을 넣고 { }에 변수 이름을 지정하면 됩니다.
#
# >>> language = 'Python'
# >>> version = 3.6
# >>> f'Hello, {language} {version}'
# 'Hello, Python 3.6'
################################################################################


#######################################
# 24.2.12  format 메서드로 문자열 정렬하기 ##
################################################################################
# '{인덱스:<길이}'.format(값)
# >>> '{0:<10}'.format('python')
# 'python    '
#
# '{인덱스:>길이}'.format(값)
# >>> '{0:>10}'.format('python')
# '    python'
#
# 참고로 인덱스를 사용하지 않는다면 :(콜론)과 정렬 방법만 지정해도 됩니다.
#
# >>> '{:>10}'.format('python')
# '    python'
################################################################################


##########################
# 24.2.13 숫자 개수 맞추기 ##
################################################################################
# %d는 다음과 같이 %와 d 사이에 0과 숫자 개수를 넣어주면 자릿수에 맞춰서 앞에 0이 들어갑니다.
# 즉, %03d로 지정하면 1은 '001', 35는 '035'가 됩니다.
# { }를 사용할 때는 인덱스나 이름 뒤에 :(콜론)를 붙이고 03d처럼 0과 숫자 개수를 지정하면 됩니다.
#
# '%0개수d' % 숫자
# '{인덱스:0개수d'}'.format(숫자)
# >>> '%03d' % 1
# '001'
# >>> '{0:03d}'.format(35)
# '035'
#
# 실수도 숫자 개수를 맞출 수 있습니다.
# 특히 소수점 이하 자릿수를 지정하고 싶으면
# %08.2f처럼 .(점) 뒤에 자릿수를 지정해줍니다.
#
# '%0개수.자릿수f' % 숫자
# '{인덱스:0개수.자릿수f'}.format(숫자)
# >>> '%08.2f' % 3.6
# '00003.60'
# >>> '{0:08.2f}'.format(150.37)
# '00150.37'
################################################################################


######################################
# 24.2.14 채우기와 정렬을 조합해서 사용하기 ##
################################################################################
# >>> '{0:0<10}'.format(15)    # 길이 10, 왼쪽으로 정렬하고 남는 공간은 0으로 채움
# '1500000000'
# >>> '{0:0>10}'.format(15)    # 길이 10, 오른쪽으로 정렬하고 남는 공간은 0으로 채움
# '0000000015'
# >>> '{0:0>10.2f}'.format(15)    # 길이 10, 오른쪽으로 정렬하고 소수점 자릿수는 2자리
# '0000015.00'
# >>> '{0: >10}'.format(15)    # 남는 공간을 공백으로 채움
# '        15'
# >>> '{0:>10}'.format(15)     # 채우기 부분을 생략하면 공백이 들어감
# '        15'
# >>> '{0:x>10}'.format(15)    # 남는 공간을 문자 x로 채움
# 'xxxxxxxx15'
################################################################################



################################
# 참고 | 금액에서 천단위로 콤마 넣기 ##
################################################################################
# 숫자 중에서 금액은 천단위로 ,(콤마)를 넣죠? 파이썬에서는 간단하게 천단위로 콤마를 넣을 수 있습니다.
# 먼저 format 내장 함수를 사용하는 방법입니다. 다음과 같이 format 함수에 숫자와 ','를 넣어줍니다.
#
# >>> format(1493500, ',')
# '1,493,500'
#
# format 함수는 서식 지정자와 함께 사용할 수 있습니다.
#     다음은 콤마를 넣은 숫자를 오른쪽 정렬합니다.
# >>> '%20s' % format(1493500, ',')    # 길이 20, 오른쪽으로 정렬
# '           1,493,500'
#
# 포매팅에서 콤마를 넣으려면
# 다음과 같이 :(콜론)뒤에 ,(콤마)를 지정하면 됩니다.
# >>> '{0:,}'.format(1493500)
# '1,493,500'
#
# 만약 정렬을 하고 싶다면 정렬 방향과 길이 뒤에 콤마를 지정해줍니다.
# >>> '{0:>20,}'.format(1493500)     # 길이 20, 오른쪽으로 정렬
# '           1,493,500'
# >>> '{0:0>20,}'.format(1493500)    # 길이 20, 오른쪽으로 정렬하고 남는 공간은 0으로 채움
# '000000000001,493,500'
################################################################################


###########################
# 참고 | raw 문자열 사용하기 ##
################################################################################
# 문자열 앞에 r 또는 R을 붙이면 raw 문자열이 됩니다.
# 이 raw 문자열은 이스케이프 시퀀스를 그대로 표현할 때 사용합니다.
# 즉, 다음과 같이 \를 \\로 두 번 쓰지 않고 한 번만 써도 됩니다.
#
# >>> print(r'C:\Users\dojang\AppData\Local\Programs\Python\Python36-32\python.exe')
# C:\Users\dojang\AppData\Local\Programs\Python\Python36-32\python.exe
#


## 연습문제 1
# 다음 소스 코드를 완성하여 파일 경로에서 파일명만 출력되게 만드세요.
# 단, 경로에서 폴더의 깊이가 달라지더라도 파일명만 출력할 수 있어야 합니다.
print('%7s' % '연습문제 1')
path = 'C:\\Users\\dojang\\AppData\\Local\\Programs\\Python\\Python36-32\\python.exe'
x = path.split("\\")
filename = x[-1]
print(filename)


## 연습문제 2
# 특정 단어 세기
# input값 : the grown-ups\' response, this time, was to advise me to lay aside my drawings of boa constrictors, whether from the inside or the outside, and devote myself instead to geography, history, arithmetic, and grammar. That is why, at the, age of six, I gave up what might have been a magnificent career as a painter. I had been disheartened by the failure of my Drawing Number One and my Drawing Number Two. Grown-ups never understand anything by themselves, and it is tiresome for children to be always and forever explaining things to the.
# paragraph = input()
# words = paragraph.split()
# count = 0
# for line in words :
#     if  line.strip(',.\'"" ') == 'the' :
#         count += 1
# print(count)
#


## 연습문제 3
# 표준 입력으로 물품 가격 여러 개가 문자열 한 줄로 입력되고, 각 가격은 ;(세미콜론)으로 구분되어 있습니다. 입력된 가격을 높은 가격순으로 출력하는 프로그램을 만드세요(input에서 안내 문자열은 출력하지 않아야 합니다). 이때 가격은 길이를 9로 만든 뒤 오른쪽으로 정렬하고 천단위로 ,(콤마)를 넣으세요.
# 입력값 : 51900;83000;158000;367500;250000;59200;128500;1304000
prices = input()
a = map(int, prices.split(';')) # ; 로 나눠진 입력값을 map 객체에 저장하여 a 변수에 저장
price_list = list(a) # map 객체를 리스트에 저장

price_list.sort(reverse=True) # 리스트를 역순으로 정렬
for price in price_list : # 출력
    print('{0:>9,}'.format(price))



