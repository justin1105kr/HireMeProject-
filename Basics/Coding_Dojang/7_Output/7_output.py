# 연산자
# + 덧셈 a + b 두 값을 더함
#
# - 뺄셈 a - b a에서 b를 뺌
#
# * 곱셈 a * b 두 값을 곱함
#
# / 나눗셈 a / b a에서 b를 나누며 결과는 실수
#
# // 버림 나눗셈 a // b a에서 b를 나누며 소수점 이하는 버림
#
# % 나머지 a % b a에서 b를 나누었을 때 나머지를 구함
#
# ** 거듭제곱 a ** b a를 b번 곱함
#
# @ 행렬 곱셈 a @ b 행렬 a와 b를 곱함
################################################################################

#########################
# 7.1 값을 여러 개 출력하기 ##
################################################################################
# print에는 변수나 값 여러 개를 ,(콤마)로 구분하여 넣을 수 있습니다.
#
# print(값1, 값2, 값3)
# print(변수1, 변수2, 변수3)
#
# 7.1.1 sep로 값 사이에 문자 넣기
# 그런데 값 사이에 공백이 아닌 다른 문자를 넣고 싶을 수도 있습니다.
# 이때는 다음과 같이 print의 sep에 문자 또는 문자열을 지정해주면 됩니다(sep는 구분자라는 뜻의 separator에서 따왔습니다).
#
# print(값1, 값2, sep='문자 또는 문자열')
# print(변수1, 변수2, sep='문자 또는 문자열')
# >>> print(1, 2, 3, sep=', ')    # sep에 콤마와 공백을 지정
# 1, 2, 3
# >>> print(4, 5, 6, sep=',')    # sep에 콤마만 지정
# 4,5,6
# >>> print('Hello', 'Python', sep='')    # sep에 빈 문자열을 지정
# HelloPython
# >>> print(1920, 1080, sep='x')    # sep에 x를 지정
# 1920x1080
################################################################################

###################
# 7.2 줄바꿈 활용하기 #
################################################################################
# 그럼 print 한 번으로 값을 여러 줄에 출력할 수는 없을까요? 방법은 간단합니다.
# print의 sep에 개행 문자(\n)라는 특별한 문자를 지정하면 값을 한 줄에 하나씩 출력할 수 있습니다.
# 참고로 \n도 문자이므로 print에 바로 넣어서 사용할 수도 있습니다.
# 다음과 같이 문자열 안에 \n를 넣으면 1 2 3은 세 줄로 출력되겠죠?
# print(1, 2, 3, sep='\n')와 결과가 같습니다.
# >>> print(1, 2, 3, sep='\n')
# 1
# 2
# 3
# >>> print('1\n2\n3')    # 문자열 안에 \n을 사용하여 줄바꿈
# 1
# 2
# 3
# 참고 | 제어 문자
# 제어 문자는 화면에 출력되지는 않지만 출력 결과를 제어한다고 해서 제어 문자라 부릅니다. 또한, 제어 문자는 \로 시작하는 이스케이프 시퀀스입니다(부록 ‎47.6 이스케이프 시퀀스 참조).
# \n: 다음 줄로 이동하며 개행이라고도 부릅니다.
# \t: 탭 문자, 키보드의 Tab 키와 같으며 여러 칸을 띄웁니다.
# \\: \ 문자 자체를 출력할 때는 \를 두 번 써야 합니다.
#
# 7.2.1 end 사용하기
# print는 기본적으로 출력하는 값 끝에 \n을 붙입니다. 그래서 print를 여러 번 사용하면 값이 여러 줄에 출력됩니다.
# 그러면 print를 여러 번 사용해서 print(1, 2, 3)처럼 한 줄에 여러 개의 값을 출력할 수는 없을까요? 이때는 print의 end에 빈 문자열을 지정해주면 됩니다.
#
# print(값, end='문자 또는 문자열')
# print(변수, end='문자 또는 문자열')
# print_multiple_end.py
# print(1, end='')    # end에 빈 문자열을 지정하면 다음 번 출력이 바로 뒤에 오게 됨
# print(2, end='')
# print(3)
################################################################################

################################################################################
# 7.4 연습문제: 날짜와 시간 출력하기
# 다음 소스 코드를 완성하여 날짜와 시간이 출력되게 만드세요.
year = 2000
month = 10
day = 27
hour = 11
minute = 43
second = 59

print(year, month, day, sep='/', end=' ')
print(hour, minute, second, sep=':')
