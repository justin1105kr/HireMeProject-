힙과 우선순위 큐
힙
(1) 각 노드가 하위 노드보다 작은 이진 트리
(2) 가장 큰(작은) 노드에 접근하는 시간복잡도 O(1)
(3) 그외 수정,조회,삽입 시간복잡도 O(log N)
(4) 따라서 가장 큰(작은) 요소에 반복적으로 접근하는 프로그램에 유용

####################################
7.4.2 Heapq 모듈 ( 메소드 )         ##
##########################################################
import heapq
heapq.heapify(반복 가능 객체) : 리스트를 O(n) 시간 안에 힘으로 변환
heapq.heappush(힙 객체, 요소)
heapq.heappop(힙) : 힙에서 가장 작은 항목 제거
heapq.heappushpop(힙 객체, 요소) : 힙의 가장 작은 항목 반환, 새항목 추가
heapq.heapreplace(힙 객체, 요소) : 힙의 가장 작은 항목 반환, 새 항목 추가
=>  heappush / heappop 을 따로 쓰는 것보다
    heappushpop / heapreplae 를 쓰는 것이 효율적
heapq.merge(*반복 가능한 객체) : 여러 반복 가능한 객체를 정렬된 결과의 "이터레이터" 반환
heapq.nlargest(n, 반복 가능 객체) :            큰
heapq.nsmallest(n, 반복 가능 객체) : n 개의 가장 작은 "리스트" 반환

h = []
heapq.heappush(h, (1, food))
heapq.heappush(h, (2, girl))
heapq.heappop(h)
##########################################################

우선순위 큐: 우선순위의 개념을 큐에 도입한 자료 구조
데이터들이 우선순위를 가지고 있고 우선순위가 높은 데이터가 먼저 나간다.

우선순위 큐의 이용 사례
- 시뮬레이션 시스템
- 네트워크 트래픽 제어
- 운영 체제에서의 작업 스케쥴링
- 수치 해석적인 계산
- 우선순위 큐는 배열, 연결리스트, 힙 으로 구현이 가능하다. 이 중에서 힙(heap)으로 구현하는 것이 가장 효율적이다.

자료구조 ‘힙(heap)’이란?
완전 이진 트리의 일종으로 우선순위 큐를 위하여 만들어진 자료구조이다.
여러 개의 값들 중에서 최댓값이나 최솟값을 빠르게 찾아내도록 만들어진 자료구조이다.
힙은 일종의 반정렬 상태(느슨한 정렬 상태) 를 유지한다.
큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있다는 정도
간단히 말하면 부모 노드의 키 값이 자식 노드의 키 값보다 항상 큰(작은) 이진 트리를 말한다.
힙 트리에서는 중복된 값을 허용한다. (이진 탐색 트리에서는 중복된 값을 허용하지 않는다.)
힙(heap)의 종류

최대 힙(max heap)
부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진 트리
key(부모 노드) >= key(자식 노드)
최소 힙(min heap)
부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리
key(부모 노드) <= key(자식 노드)

힙(heap)의 구현
https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html